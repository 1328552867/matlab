x = [1 2 3 4 5 6 7 8 9 ];
y = [9 7 6 3 -1 2 5 7 20];
p = polyfit(x,y,3);
% p = polyfit(x,y,n) 返回次数为 n 的多项式 p(x) 的系数，
% 该阶数是 y 中数据的最佳拟合（在最小二乘方式中）。
% p 中的系数按降幂排列，p 的长度为 n+1
%拟合次数越多对样本数据越准确，但是对测试数据的结果会下降
xi = 0:.2:10;
yi = polyval(p,xi);
% y = polyval(p,x)
% 计算多项式 p 在 x 的每个点处的值。
% 参数 p 是长度为 n+1 的向量，
% 其元素是 n 次多项式的系数（降幂排序）：

plot(xi,yi,x,y,'r*');

% 对于回归分析，还需要进行回归方程的显著性检验、回归系数的显著性检验以及残差分析等，
% 记住：“拟合优度”很重要，
% 但要是只单单看“拟合优度”这一个指标，则是没有意义的

% SSE：和方差
% R-square: R方
% Adjusted R-square：调整R方 越大越好
% RMSN:均方根误差
syms t;
x = [0;0.4;1.2;2;2.8;3.6;4.4;5.2;6;7.2;8;9.2;10.4;11.6;12.4;13.6;14.4;15];
y = [1;0.85;0.29;-0.27;-0.53;-0.4;-0.12;0.17;0.28;0.15;-0.03;-0.15;-0.071;0.059;0.08;0.032;-0.015;-0.02];
f = fittype('a*cos(k*t)*exp(w*t)','independent','t','coefficients',{'a','k','w'});
%用法为fittype('自定义函数','independent','自变量','coefficients',{'系数1','系数2'……});
cfun = fit(x,y,f);%显示拟合函数，数据必须为列向量形式
xi = 0:0.1:20;
yi = cfun(xi);
plot(x,y,'r*',xi,yi,'b-');
